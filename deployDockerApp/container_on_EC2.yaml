name: Build, Push to ECR, and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.REPO_NAME }}
      IMAGE_TAG: ${{ github.sha.substr(0,7) }}

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Set up AWS CLI for ECR access
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Login to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # Step 4: Build the Docker image
      - name: Build Docker Image
        run: |
          mv .env.example .env
          docker build --cache-from $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REPOSITORY:$IMAGE_TAG .

      # Step 5: Tag Docker Image
      - name: Tag Docker Image
        run: |
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 6: Push Docker Image to ECR
      - name: Push Docker Image to ECR
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 7: Notify Slack on Failure
      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": ":x: Ewanc Backend Deployment to EC2 failed! :warning:",
              "channel": "#github-actions-status",
              "username": "github-actions",
              "icon_emoji": ":octocat:"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  pull-and-run:
    runs-on: ubuntu-latest

    needs: build-and-push  # Ensure this job runs after build-and-push

    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: me-south-1
      ECR_REPOSITORY: "ewanc"
      IMAGE_TAG: "latest"
      EC2_INSTANCE_HOST: ${{ secrets.EC2_INSTANCE_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

    steps:
      # Step 1: Set up AWS CLI for ECR access
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # Step 2: SSH into EC2 and deploy the container
      - name: SSH and Deploy to EC2
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_INSTANCE_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo "Stopping and removing the old container if exists"
            docker stop ewanc || true
            docker rm ewanc || true

            echo "Pulling the new image from ECR"
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

            echo "Running the new container"
            docker run -d --name ewanc -p 80:80 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 3: Notify Slack on Failure
      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": ":x: Ewanc Backend Deployment to EC2 failed! :warning:",
              "channel": "#github-actions-status",
              "username": "github-actions",
              "icon_emoji": ":octocat:"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
